GIT-PUSH(1)                       Git Manual                       GIT-PUSH(1)



NNAAMMEE
       git-push - Update remote refs along with associated objects

SSYYNNOOPPSSIISS
       _g_i_t _p_u_s_h [--all | --mirror | --tags] [--follow-tags] [-n | --dry-run] [--receive-pack=<git-receive-pack>]
                  [--repo=<repository>] [-f | --force] [--prune] [-v | --verbose] [-u | --set-upstream]
                  [--force-with-lease[=<refname>[:<expect>]]]
                  [--no-verify] [<repository> [<refspec>...]]


DDEESSCCRRIIPPTTIIOONN
       Updates remote refs using local refs, while sending objects necessary
       to complete the given refs.

       You can make interesting things happen to a repository every time you
       push into it, by setting up _h_o_o_k_s there. See documentation for ggiitt--
       rreecceeiivvee--ppaacckk(1).

       When the command line does not specify where to push with the
       <repository> argument, branch.*.remote configuration for the current
       branch is consulted to determine where to push. If the configuration is
       missing, it defaults to _o_r_i_g_i_n.

       When the command line does not specify what to push with <refspec>...
       arguments or --all, --mirror, --tags options, the command finds the
       default <refspec> by consulting remote.*.push configuration, and if it
       is not found, honors push.default configuration to decide what to push
       (See gitlink:git-config[1] for the meaning of push.default).

OOPPTTIIOONNSS
       <repository>
           The "remote" repository that is destination of a push operation.
           This parameter can be either a URL (see the section GIT URLS below)
           or the name of a remote (see the section REMOTES below).

       <refspec>...
           Specify what destination ref to update with what source object. The
           format of a <refspec> parameter is an optional plus +, followed by
           the source object <src>, followed by a colon :, followed by the
           destination ref <dst>.

           The <src> is often the name of the branch you would want to push,
           but it can be any arbitrary "SHA-1 expression", such as master~4 or
           HEAD (see ggiittrreevviissiioonnss(7)).

           The <dst> tells which ref on the remote side is updated with this
           push. Arbitrary expressions cannot be used here, an actual ref must
           be named. If git push [<repository>] without any <refspec> argument
           is set to update some ref at the destination with <src> with
           remote.<repository>.push configuration variable, :<dst> part can be
           omitted---such a push will update a ref that <src> normally updates
           without any <refspec> on the command line. Otherwise, missing
           :<dst> means to update the same ref as the <src>.

           The object referenced by <src> is used to update the <dst>
           reference on the remote side. By default this is only allowed if
           <dst> is not a tag (annotated or lightweight), and then only if it
           can fast-forward <dst>. By having the optional leading +, you can
           tell Git to update the <dst> ref even if it is not allowed by
           default (e.g., it is not a fast-forward.) This does nnoott attempt to
           merge <src> into <dst>. See EXAMPLES below for details.

           tag <tag> means the same as refs/tags/<tag>:refs/tags/<tag>.

           Pushing an empty <src> allows you to delete the <dst> ref from the
           remote repository.

           The special refspec : (or +: to allow non-fast-forward updates)
           directs Git to push "matching" branches: for every branch that
           exists on the local side, the remote side is updated if a branch of
           the same name already exists on the remote side.

       --all
           Instead of naming each ref to push, specifies that all refs under
           refs/heads/ be pushed.

       --prune
           Remove remote branches that don’t have a local counterpart. For
           example a remote branch tmp will be removed if a local branch with
           the same name doesn’t exist any more. This also respects refspecs,
           e.g.  git push --prune remote refs/heads/*:refs/tmp/* would make
           sure that remote refs/tmp/foo will be removed if refs/heads/foo
           doesn’t exist.

       --mirror
           Instead of naming each ref to push, specifies that all refs under
           refs/ (which includes but is not limited to refs/heads/,
           refs/remotes/, and refs/tags/) be mirrored to the remote
           repository. Newly created local refs will be pushed to the remote
           end, locally updated refs will be force updated on the remote end,
           and deleted refs will be removed from the remote end. This is the
           default if the configuration option remote.<remote>.mirror is set.

       -n, --dry-run
           Do everything except actually send the updates.

       --porcelain
           Produce machine-readable output. The output status line for each
           ref will be tab-separated and sent to stdout instead of stderr. The
           full symbolic names of the refs will be given.

       --delete
           All listed refs are deleted from the remote repository. This is the
           same as prefixing all refs with a colon.

       --tags
           All refs under refs/tags are pushed, in addition to refspecs
           explicitly listed on the command line.

       --follow-tags
           Push all the refs that would be pushed without this option, and
           also push annotated tags in refs/tags that are missing from the
           remote but are pointing at commit-ish that are reachable from the
           refs being pushed.

       --receive-pack=<git-receive-pack>, --exec=<git-receive-pack>
           Path to the _g_i_t_-_r_e_c_e_i_v_e_-_p_a_c_k program on the remote end. Sometimes
           useful when pushing to a remote repository over ssh, and you do not
           have the program in a directory on the default $PATH.

       --[no-]force-with-lease, --force-with-lease=<refname>,
       --force-with-lease=<refname>:<expect>
           Usually, "git push" refuses to update a remote ref that is not an
           ancestor of the local ref used to overwrite it.

           This option bypasses the check, but instead requires that the
           current value of the ref to be the expected value. "git push" fails
           otherwise.

           Imagine that you have to rebase what you have already published.
           You will have to bypass the "must fast-forward" rule in order to
           replace the history you originally published with the rebased
           history. If somebody else built on top of your original history
           while you are rebasing, the tip of the branch at the remote may
           advance with her commit, and blindly pushing with --force will lose
           her work.

           This option allows you to say that you expect the history you are
           updating is what you rebased and want to replace. If the remote ref
           still points at the commit you specified, you can be sure that no
           other people did anything to the ref (it is like taking a "lease"
           on the ref without explicitly locking it, and you update the ref
           while making sure that your earlier "lease" is still valid).

           --force-with-lease alone, without specifying the details, will
           protect all remote refs that are going to be updated by requiring
           their current value to be the same as the remote-tracking branch we
           have for them, unless specified with a
           --force-with-lease=<refname>:<expect> option that explicitly states
           what the expected value is.

           --force-with-lease=<refname>, without specifying the expected
           value, will protect the named ref (alone), if it is going to be
           updated, by requiring its current value to be the s